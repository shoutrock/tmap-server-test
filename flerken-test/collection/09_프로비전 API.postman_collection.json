{
	"info": {
		"_postman_id": "cc7ec542-f8aa-4c5f-bba3-b7b4e2c595b2",
		"name": "09_프로비전 API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "09_01_사용자 삭제",
			"item": [
				{
					"name": "09_01_01_UserKey 사용자 삭제 성공",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4d909f85-e301-44ea-a614-b3367ab1719a",
								"exec": [
									"const utils = eval(globals.utils)();",
									"const minNo = pm.variables.get('minNo_provision_1');",
									"const userKey = pm.variables.get('userKey_provision_1');",
									"",
									"const registerPoiFavorite = function() {",
									"    const poiFavorite = eval(globals.poiFavorite)();",
									"    const poiUrl = pm.variables.get('host') + poiFavorite.uploadUri;",
									"    let poiUploadBody = poiFavorite.uploadBody;",
									"    poiUploadBody.minNo = minNo;",
									"    poiUploadBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: poiUrl,",
									"        method: 'POST',",
									"        header: utils.getHeader(),",
									"        body: JSON.stringify(poiUploadBody)",
									"    }, function (err, response) {",
									"        pm.test('Pre] poi 데이터 사전 등록', () => pm.expect(response).to.have.status(200));",
									"        registerRouteFavorite();",
									"    });",
									"}",
									"",
									"const registerRouteFavorite = function() {",
									"    const routeFavorite = eval(globals.routeFavorite)();",
									"    const routeUrl = pm.variables.get('host') + routeFavorite.uploadUri;",
									"    let routeUploadBody = routeFavorite.uploadBody;",
									"    routeUploadBody.minNo = minNo;",
									"    routeUploadBody.userKey =  userKey;",
									"    pm.sendRequest({",
									"        url: routeUrl,",
									"        method: 'POST',",
									"        header: utils.getHeader(),",
									"        body: JSON.stringify(routeUploadBody)",
									"    }, function (err, response) {",
									"        pm.test('Pre] 경로 데이터 사전 등록', () => pm.expect(response).to.have.status(200));",
									"        registerRecentDestination();",
									"    });",
									"}",
									"",
									"const registerRecentDestination = function() {",
									"    const poiRecent = eval(globals.poiRecent)();",
									"    const poiRecentUrl = pm.variables.get(\"host\") + poiRecent.uploadUri;",
									"    let poiRecentBody = poiRecent.uploadBody;",
									"    poiRecentBody.minNo = minNo;",
									"    poiRecentBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: poiRecentUrl, ",
									"        async:false,",
									"        method: 'POST',",
									"        header:eval(globals.getHeader)(),",
									"        body: JSON.stringify(poiRecentBody)",
									"    }, function (err, res) {",
									"        pm.test('Pre] 최근길 데이터 사전 등록', () => pm.expect(res).to.have.status(200));",
									"        registerPublicTrafficFavorite();",
									"    });",
									"}",
									"",
									"const registerPublicTrafficFavorite = function() {",
									"    const publicTrafficFavorite = eval(globals.publicTrafficFavorite)();",
									"    const publicTrafficFavoriteUrl = pm.variables.get(\"host\") + publicTrafficFavorite.uploadUri;",
									"    let publicTrafficFavoriteBody = publicTrafficFavorite.registBody;",
									"    publicTrafficFavoriteBody.minNo = minNo;",
									"    publicTrafficFavoriteBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: publicTrafficFavoriteUrl, ",
									"        async:false,",
									"        method: 'POST',",
									"        header:eval(globals.getHeader)(),",
									"        body: JSON.stringify(publicTrafficFavoriteBody)",
									"    }, function (err, res) {",
									"        pm.test('Pre] 대중교통 데이터 사전 등록', () => pm.expect(res).to.have.status(200));",
									"        registerPersonalInfo();",
									"    });",
									"}",
									"",
									"const registerPersonalInfo = function() {",
									"    const personalInfo = eval(globals.personalInfo)();",
									"    const personalInfoUrl = pm.variables.get(\"host\") + personalInfo.uri;",
									"    let personalInfoRegistBody = personalInfo.registBody;",
									"    personalInfoRegistBody.mdn = minNo;",
									"    personalInfoRegistBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: personalInfoUrl, ",
									"        async:false,",
									"        method: 'POST',",
									"        header:eval(globals.getHeader)(),",
									"        body: JSON.stringify(personalInfoRegistBody)",
									"    }, function (err, res) {",
									"        pm.test('Pre] 사용자 프로필  데이터 사전 등록', () => pm.expect(res).to.have.status(200));",
									"        registerCarInfo();",
									"    });",
									"}",
									"",
									"const registerCarInfo = function() {",
									"    const carInfo = eval(globals.carInfo)();",
									"    const carInfoUrl = pm.variables.get(\"host\") + carInfo.uri;",
									"    let carInfoRegistBody = carInfo.registBody;",
									"    carInfoRegistBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: carInfoUrl, ",
									"        async:false,",
									"        method: 'POST',",
									"        header:eval(globals.getHeader)(),",
									"        body: JSON.stringify(carInfoRegistBody)",
									"    }, function (err, res) {",
									"        pm.test('Pre] 차량 프로필  데이터 사전 등록', () => pm.expect(res).to.have.status(200));",
									"        registerOilDcJoin();",
									"    });",
									"}",
									"",
									"const registerOilDcJoin = function() {",
									"    const oilDcJoinInfo = eval(globals.oilDcJoinInfo)();",
									"    const oilDcJoinUrl = pm.variables.get(\"host\") + oilDcJoinInfo.uri;",
									"    let oilDcJoinRegistBody = oilDcJoinInfo.registBody;",
									"    oilDcJoinRegistBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: oilDcJoinUrl, ",
									"        async:false,",
									"        method: 'POST',",
									"        header:eval(globals.getHeader)(),",
									"        body: JSON.stringify(oilDcJoinRegistBody)",
									"    }, function (err, res) {",
									"        pm.test('Pre] 주유할인 가입 정보  데이터 사전 등록', () => pm.expect(res).to.have.status(200));",
									"        registerSendToCar();",
									"    });",
									"}",
									"",
									"const registerSendToCar = function() {",
									"    const sendToCarInfo = eval(globals.sendToCarInfo)();",
									"    const sendToCarInfoUrl = pm.variables.get(\"host\") + sendToCarInfo.uri;",
									"    let sendToCarInfoRegistBody = sendToCarInfo.registBody;",
									"    sendToCarInfoRegistBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: sendToCarInfoUrl, ",
									"        async:false,",
									"        method: 'POST',",
									"        header:eval(globals.getHeader)(),",
									"        body: JSON.stringify(sendToCarInfoRegistBody)",
									"    }, function (err, res) {",
									"        pm.test('Pre] 차량 전송 정보  데이터 사전 등록', () => pm.expect(res).to.have.status(200));",
									"    });",
									"}",
									"",
									"const readyTestData = function() {",
									"    registerPoiFavorite();",
									"}",
									"",
									"readyTestData();",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d001fb65-2db9-406e-8ca7-c3be1f3bfde8",
								"exec": [
									"tests[\"ResponseCode 확인\"] = pm.response.code === 200;",
									"",
									"const resultBody = JSON.parse(responseBody);",
									"tests[\"프로비전 Result 성공\"] = resultBody.result === \"2000\";",
									"",
									"",
									"const utils = eval(globals.utils)();",
									"const minNo = pm.variables.get('minNo_provision_1');",
									"const userKey = pm.variables.get('userKey_provision_1');",
									"",
									"const poiFavorite = eval(globals.poiFavorite)();",
									"utils.assertEmptyData(poiFavorite, {type: \"HEIMDALL\",key: userKey}, 'POI');",
									"",
									"const routeFavorite = eval(globals.routeFavorite)();",
									"utils.assertEmptyData(routeFavorite, {type: \"HEIMDALL\",key: userKey}, '경로');",
									"",
									"const publicTrafficFavorite = eval(globals.publicTrafficFavorite)();",
									"utils.assertEmptyData(publicTrafficFavorite, {type: \"HEIMDALL\",key: userKey}, '대중교통');",
									"",
									"const poiRecent = eval(globals.poiRecent)();",
									"utils.assertEmptyData(poiRecent, {type: \"HEIMDALL\",key: userKey}, '최근길');",
									"",
									"const personalInfo = eval(globals.personalInfo)();",
									"utils.assertEmptyData(personalInfo, {type: \"HEIMDALL\",key: userKey}, '사용자 프로필');",
									"",
									"const carInfo = eval(globals.carInfo)();",
									"utils.assertEmptyData(carInfo, {type: \"HEIMDALL\",key: userKey}, '차량 프로필');",
									"",
									"const oilDcJoinInfo = eval(globals.oilDcJoinInfo)();",
									"utils.assertEmptyData(oilDcJoinInfo, {type: \"HEIMDALL\",key: userKey}, '주유 할인');",
									"",
									"const sendToCarInfo = eval(globals.sendToCarInfo)();",
									"utils.assertEmptyData(sendToCarInfo, {type: \"HEIMDALL\",key: userKey}, '차량전송 정보');",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "chcode",
								"type": "text",
								"value": "{{chcode}}"
							},
							{
								"key": "cp_channel.apcode",
								"type": "text",
								"value": "{{cp_channel.apcode}}"
							},
							{
								"key": "cp_channel.ostype",
								"type": "text",
								"value": "{{cp_channel.ostype}}"
							},
							{
								"key": "tid",
								"type": "text",
								"value": "{{tid}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mdn\": \"{{minNo_provision_1}}\",\n    \"userKey\": \"{{userKey_provision_1}}\",\n    \"updateRequestDate\": \"20191230123030\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/provision-delete-user",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"provision-delete-user"
							]
						},
						"description": "경로 즐겨찾기 조회"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "aba2e8a8-f2a1-44a3-b911-b4534aa09cac",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "86c03d60-35a7-48df-b0df-4932c71a6b5d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "09_02_사용자 앱 해지 배포",
			"item": [
				{
					"name": "09_02_01_Tmap대중교통앱 삭제 + Tmap앱 사용자가 아닐때 - 공통 데이터 삭제",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4d909f85-e301-44ea-a614-b3367ab1719a",
								"exec": [
									"const utils = eval(globals.utils)();",
									"const minNo = pm.variables.get('minNo_provision_1');",
									"const userKey = pm.variables.get('userKey_provision_1');",
									"",
									"const registerPoiFavorite = function() {",
									"    const poiFavorite = eval(globals.poiFavorite)();",
									"    const poiUrl = pm.variables.get('host') + poiFavorite.uploadUri;",
									"    let poiUploadBody = poiFavorite.uploadBody;",
									"    poiUploadBody.minNo = minNo;",
									"    poiUploadBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: poiUrl,",
									"        method: 'POST',",
									"        header: utils.getHeader(),",
									"        body: JSON.stringify(poiUploadBody)",
									"    }, function (err, response) {",
									"        pm.test('Pre] poi 데이터 사전 등록', () => pm.expect(response).to.have.status(200));",
									"        registerRouteFavorite();",
									"    });",
									"}",
									"",
									"const registerRouteFavorite = function() {",
									"    const routeFavorite = eval(globals.routeFavorite)();",
									"    const routeUrl = pm.variables.get('host') + routeFavorite.uploadUri;",
									"    let routeUploadBody = routeFavorite.uploadBody;",
									"    routeUploadBody.minNo = minNo;",
									"    routeUploadBody.userKey =  userKey;",
									"    pm.sendRequest({",
									"        url: routeUrl,",
									"        method: 'POST',",
									"        header: utils.getHeader(),",
									"        body: JSON.stringify(routeUploadBody)",
									"    }, function (err, response) {",
									"        pm.test('Pre] 경로 데이터 사전 등록', () => pm.expect(response).to.have.status(200));",
									"        registerRecentDestination();",
									"    });",
									"}",
									"",
									"const registerRecentDestination = function() {",
									"    const poiRecent = eval(globals.poiRecent)();",
									"    const poiRecentUrl = pm.variables.get(\"host\") + poiRecent.uploadUri;",
									"    let poiRecentBody = poiRecent.uploadBody;",
									"    poiRecentBody.minNo = minNo;",
									"    poiRecentBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: poiRecentUrl, ",
									"        async:false,",
									"        method: 'POST',",
									"        header:eval(globals.getHeader)(),",
									"        body: JSON.stringify(poiRecentBody)",
									"    }, function (err, res) {",
									"        pm.test('Pre] 최근길 데이터 사전 등록', () => pm.expect(res).to.have.status(200));",
									"        registerPublicTrafficFavorite();",
									"    });",
									"}",
									"",
									"const registerPublicTrafficFavorite = function() {",
									"    const publicTrafficFavorite = eval(globals.publicTrafficFavorite)();",
									"    const publicTrafficFavoriteUrl = pm.variables.get(\"host\") + publicTrafficFavorite.uploadUri;",
									"    let publicTrafficFavoriteBody = publicTrafficFavorite.registBody;",
									"    publicTrafficFavoriteBody.minNo = minNo;",
									"    publicTrafficFavoriteBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: publicTrafficFavoriteUrl, ",
									"        async:false,",
									"        method: 'POST',",
									"        header:eval(globals.getHeader)(),",
									"        body: JSON.stringify(publicTrafficFavoriteBody)",
									"    }, function (err, res) {",
									"        pm.test('Pre] 대중교통 데이터 사전 등록', () => pm.expect(res).to.have.status(200));",
									"        registerPersonalInfo();",
									"    });",
									"}",
									"",
									"const registerPersonalInfo = function() {",
									"    const personalInfo = eval(globals.personalInfo)();",
									"    const personalInfoUrl = pm.variables.get(\"host\") + personalInfo.uri;",
									"    let personalInfoRegistBody = personalInfo.registBody;",
									"    personalInfoRegistBody.mdn = minNo;",
									"    personalInfoRegistBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: personalInfoUrl, ",
									"        async:false,",
									"        method: 'POST',",
									"        header:eval(globals.getHeader)(),",
									"        body: JSON.stringify(personalInfoRegistBody)",
									"    }, function (err, res) {",
									"        pm.test('Pre] 사용자 프로필  데이터 사전 등록', () => pm.expect(res).to.have.status(200));",
									"        registerCarInfo();",
									"    });",
									"}",
									"",
									"const registerCarInfo = function() {",
									"    const carInfo = eval(globals.carInfo)();",
									"    const carInfoUrl = pm.variables.get(\"host\") + carInfo.uri;",
									"    let carInfoRegistBody = carInfo.registBody;",
									"    carInfoRegistBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: carInfoUrl, ",
									"        async:false,",
									"        method: 'POST',",
									"        header:eval(globals.getHeader)(),",
									"        body: JSON.stringify(carInfoRegistBody)",
									"    }, function (err, res) {",
									"        pm.test('Pre] 차량 프로필  데이터 사전 등록', () => pm.expect(res).to.have.status(200));",
									"        registerOilDcJoin();",
									"    });",
									"}",
									"",
									"const registerOilDcJoin = function() {",
									"    const oilDcJoinInfo = eval(globals.oilDcJoinInfo)();",
									"    const oilDcJoinUrl = pm.variables.get(\"host\") + oilDcJoinInfo.uri;",
									"    let oilDcJoinRegistBody = oilDcJoinInfo.registBody;",
									"    oilDcJoinRegistBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: oilDcJoinUrl, ",
									"        async:false,",
									"        method: 'POST',",
									"        header:eval(globals.getHeader)(),",
									"        body: JSON.stringify(oilDcJoinRegistBody)",
									"    }, function (err, res) {",
									"        pm.test('Pre] 주유할인 가입 정보  데이터 사전 등록', () => pm.expect(res).to.have.status(200));",
									"        registerSendToCar();",
									"    });",
									"}",
									"",
									"const registerSendToCar = function() {",
									"    const sendToCarInfo = eval(globals.sendToCarInfo)();",
									"    const sendToCarInfoUrl = pm.variables.get(\"host\") + sendToCarInfo.uri;",
									"    let sendToCarInfoRegistBody = sendToCarInfo.registBody;",
									"    sendToCarInfoRegistBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: sendToCarInfoUrl, ",
									"        async:false,",
									"        method: 'POST',",
									"        header:eval(globals.getHeader)(),",
									"        body: JSON.stringify(sendToCarInfoRegistBody)",
									"    }, function (err, res) {",
									"        pm.test('Pre] 차량 전송 정보  데이터 사전 등록', () => pm.expect(res).to.have.status(200));",
									"    });",
									"}",
									"",
									"const readyTestData = function() {",
									"    registerPoiFavorite();",
									"}",
									"",
									"readyTestData();",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d001fb65-2db9-406e-8ca7-c3be1f3bfde8",
								"exec": [
									"tests[\"ResponseCode 확인\"] = pm.response.code === 200;",
									"",
									"const resultBody = JSON.parse(responseBody);",
									"tests[\"프로비전 Result 성공\"] = resultBody.result === \"2000\";",
									"",
									"",
									"const utils = eval(globals.utils)();",
									"const minNo = pm.variables.get('minNo_provision_1');",
									"const userKey = pm.variables.get('userKey_provision_1');",
									"const user = {type: \"HEIMDALL\", key: userKey};",
									"",
									"// 공통 데이터 삭제 확인 : 대중교통, 집/회사 정보",
									"const publicTrafficFavorite = eval(globals.publicTrafficFavorite)();",
									"utils.assertEmptyData(publicTrafficFavorite, user, '대중교통');",
									"",
									"const poiFavorite = eval(globals.poiFavorite)();",
									"",
									"const url = pm.variables.get('host') + poiFavorite.uri + '?myFavoriteYn=Y&userKey=' + userKey;",
									"pm.sendRequest({",
									"    url: url,",
									"    method: 'GET',",
									"    header: utils.getHeader(),",
									"}, function (err, response) {",
									"    const poiResponse = response.json();",
									"    console.log(poiResponse);",
									"    pm.test(\"집/회사 정보 없음\", () => pm.expect(poiResponse.poiMyFavorite.homeCustName == null && poiResponse.poiMyFavorite.officeCustName == null).to.eql(true));",
									"});",
									"",
									"// 다른 데이터 존재 확인",
									"utils.assertExistData(poiFavorite, user, 'POI');",
									"",
									"const routeFavorite = eval(globals.routeFavorite)();",
									"utils.assertExistData(routeFavorite, user, '경로');",
									"",
									"const poiRecent = eval(globals.poiRecent)();",
									"utils.assertExistData(poiRecent, user, '최근길');",
									"",
									"const personalInfo = eval(globals.personalInfo)();",
									"utils.assertExistData(personalInfo, user, '사용자 프로필');",
									"",
									"const carInfo = eval(globals.carInfo)();",
									"utils.assertExistData(carInfo, user, '차량 프로필');",
									"",
									"const oilDcJoinInfo = eval(globals.oilDcJoinInfo)();",
									"utils.assertExistData(oilDcJoinInfo, user, '주유 할인');",
									"",
									"const sendToCarInfo = eval(globals.sendToCarInfo)();",
									"utils.assertExistData(sendToCarInfo, user, '차량전송 정보');",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "chcode",
								"type": "text",
								"value": "{{chcode}}"
							},
							{
								"key": "cp_channel.apcode",
								"type": "text",
								"value": "{{cp_channel.apcode}}"
							},
							{
								"key": "cp_channel.ostype",
								"type": "text",
								"value": "{{cp_channel.ostype}}"
							},
							{
								"key": "tid",
								"type": "text",
								"value": "{{tid}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"mdn\": \"{{minNo_provision_1}}\",\n  \"userKey\": \"{{userKey_provision_1}}\",\n  \"appCode\": \"TMAP_AP_TRANSPORT\",\n  \"chName\": \"tmap\",\n  \"registeredAppList\": [],\n  \"registeredTmapAppList\": [],\n  \"updateRequestDate\": 20191230123030\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/provision-delete-app",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"provision-delete-app"
							]
						},
						"description": "경로 즐겨찾기 조회"
					},
					"response": []
				},
				{
					"name": "09_02_02_Tmap대중교통앱 삭제 + Tmap앱 사용자일 때 - 공통 데이터 삭제안함",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4d909f85-e301-44ea-a614-b3367ab1719a",
								"exec": [
									"const utils = eval(globals.utils)();",
									"const minNo = pm.variables.get('minNo_provision_1');",
									"const userKey = pm.variables.get('userKey_provision_1');",
									"",
									"const registerPoiFavorite = function() {",
									"    const poiFavorite = eval(globals.poiFavorite)();",
									"    const poiUrl = pm.variables.get('host') + poiFavorite.uploadUri;",
									"    let poiUploadBody = poiFavorite.uploadBody;",
									"    poiUploadBody.minNo = minNo;",
									"    poiUploadBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: poiUrl,",
									"        method: 'POST',",
									"        header: utils.getHeader(),",
									"        body: JSON.stringify(poiUploadBody)",
									"    }, function (err, response) {",
									"        pm.test('Pre] poi 데이터 사전 등록', () => pm.expect(response).to.have.status(200));",
									"        registerRouteFavorite();",
									"    });",
									"}",
									"",
									"const registerRouteFavorite = function() {",
									"    const routeFavorite = eval(globals.routeFavorite)();",
									"    const routeUrl = pm.variables.get('host') + routeFavorite.uploadUri;",
									"    let routeUploadBody = routeFavorite.uploadBody;",
									"    routeUploadBody.minNo = minNo;",
									"    routeUploadBody.userKey =  userKey;",
									"    pm.sendRequest({",
									"        url: routeUrl,",
									"        method: 'POST',",
									"        header: utils.getHeader(),",
									"        body: JSON.stringify(routeUploadBody)",
									"    }, function (err, response) {",
									"        pm.test('Pre] 경로 데이터 사전 등록', () => pm.expect(response).to.have.status(200));",
									"        registerRecentDestination();",
									"    });",
									"}",
									"",
									"const registerRecentDestination = function() {",
									"    const poiRecent = eval(globals.poiRecent)();",
									"    const poiRecentUrl = pm.variables.get(\"host\") + poiRecent.uploadUri;",
									"    let poiRecentBody = poiRecent.uploadBody;",
									"    poiRecentBody.minNo = minNo;",
									"    poiRecentBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: poiRecentUrl, ",
									"        async:false,",
									"        method: 'POST',",
									"        header:eval(globals.getHeader)(),",
									"        body: JSON.stringify(poiRecentBody)",
									"    }, function (err, res) {",
									"        pm.test('Pre] 최근길 데이터 사전 등록', () => pm.expect(res).to.have.status(200));",
									"        registerPublicTrafficFavorite();",
									"    });",
									"}",
									"",
									"const registerPublicTrafficFavorite = function() {",
									"    const publicTrafficFavorite = eval(globals.publicTrafficFavorite)();",
									"    const publicTrafficFavoriteUrl = pm.variables.get(\"host\") + publicTrafficFavorite.uploadUri;",
									"    let publicTrafficFavoriteBody = publicTrafficFavorite.registBody;",
									"    publicTrafficFavoriteBody.minNo = minNo;",
									"    publicTrafficFavoriteBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: publicTrafficFavoriteUrl, ",
									"        async:false,",
									"        method: 'POST',",
									"        header:eval(globals.getHeader)(),",
									"        body: JSON.stringify(publicTrafficFavoriteBody)",
									"    }, function (err, res) {",
									"        pm.test('Pre] 대중교통 데이터 사전 등록', () => pm.expect(res).to.have.status(200));",
									"        registerPersonalInfo();",
									"    });",
									"}",
									"",
									"const registerPersonalInfo = function() {",
									"    const personalInfo = eval(globals.personalInfo)();",
									"    const personalInfoUrl = pm.variables.get(\"host\") + personalInfo.uri;",
									"    let personalInfoRegistBody = personalInfo.registBody;",
									"    personalInfoRegistBody.mdn = minNo;",
									"    personalInfoRegistBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: personalInfoUrl, ",
									"        async:false,",
									"        method: 'POST',",
									"        header:eval(globals.getHeader)(),",
									"        body: JSON.stringify(personalInfoRegistBody)",
									"    }, function (err, res) {",
									"        pm.test('Pre] 사용자 프로필  데이터 사전 등록', () => pm.expect(res).to.have.status(200));",
									"        registerCarInfo();",
									"    });",
									"}",
									"",
									"const registerCarInfo = function() {",
									"    const carInfo = eval(globals.carInfo)();",
									"    const carInfoUrl = pm.variables.get(\"host\") + carInfo.uri;",
									"    let carInfoRegistBody = carInfo.registBody;",
									"    carInfoRegistBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: carInfoUrl, ",
									"        async:false,",
									"        method: 'POST',",
									"        header:eval(globals.getHeader)(),",
									"        body: JSON.stringify(carInfoRegistBody)",
									"    }, function (err, res) {",
									"        pm.test('Pre] 차량 프로필  데이터 사전 등록', () => pm.expect(res).to.have.status(200));",
									"        registerOilDcJoin();",
									"    });",
									"}",
									"",
									"const registerOilDcJoin = function() {",
									"    const oilDcJoinInfo = eval(globals.oilDcJoinInfo)();",
									"    const oilDcJoinUrl = pm.variables.get(\"host\") + oilDcJoinInfo.uri;",
									"    let oilDcJoinRegistBody = oilDcJoinInfo.registBody;",
									"    oilDcJoinRegistBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: oilDcJoinUrl, ",
									"        async:false,",
									"        method: 'POST',",
									"        header:eval(globals.getHeader)(),",
									"        body: JSON.stringify(oilDcJoinRegistBody)",
									"    }, function (err, res) {",
									"        pm.test('Pre] 주유할인 가입 정보  데이터 사전 등록', () => pm.expect(res).to.have.status(200));",
									"        registerSendToCar();",
									"    });",
									"}",
									"",
									"const registerSendToCar = function() {",
									"    const sendToCarInfo = eval(globals.sendToCarInfo)();",
									"    const sendToCarInfoUrl = pm.variables.get(\"host\") + sendToCarInfo.uri;",
									"    let sendToCarInfoRegistBody = sendToCarInfo.registBody;",
									"    sendToCarInfoRegistBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: sendToCarInfoUrl, ",
									"        async:false,",
									"        method: 'POST',",
									"        header:eval(globals.getHeader)(),",
									"        body: JSON.stringify(sendToCarInfoRegistBody)",
									"    }, function (err, res) {",
									"        pm.test('Pre] 차량 전송 정보  데이터 사전 등록', () => pm.expect(res).to.have.status(200));",
									"    });",
									"}",
									"",
									"const readyTestData = function() {",
									"    registerPoiFavorite();",
									"}",
									"",
									"readyTestData();",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d001fb65-2db9-406e-8ca7-c3be1f3bfde8",
								"exec": [
									"tests[\"ResponseCode 확인\"] = pm.response.code === 200;",
									"",
									"const resultBody = JSON.parse(responseBody);",
									"tests[\"프로비전 Result 성공\"] = resultBody.result === \"2000\";",
									"",
									"",
									"const utils = eval(globals.utils)();",
									"const minNo = pm.variables.get('minNo_provision_1');",
									"const userKey = pm.variables.get('userKey_provision_1');",
									"const user = {type: \"HEIMDALL\", key: userKey};",
									"",
									"// 모든 데이터 존재 확인",
									"const poiFavorite = eval(globals.poiFavorite)();",
									"utils.assertExistData(poiFavorite, user, 'POI');",
									"",
									"const publicTrafficFavorite = eval(globals.publicTrafficFavorite)();",
									"utils.assertExistData(publicTrafficFavorite, user, '대중교통');",
									"",
									"const routeFavorite = eval(globals.routeFavorite)();",
									"utils.assertExistData(routeFavorite, user, '경로');",
									"",
									"const poiRecent = eval(globals.poiRecent)();",
									"utils.assertExistData(poiRecent, user, '최근길');",
									"",
									"const personalInfo = eval(globals.personalInfo)();",
									"utils.assertExistData(personalInfo, user, '사용자 프로필');",
									"",
									"const carInfo = eval(globals.carInfo)();",
									"utils.assertExistData(carInfo, user, '차량 프로필');",
									"",
									"const oilDcJoinInfo = eval(globals.oilDcJoinInfo)();",
									"utils.assertExistData(oilDcJoinInfo, user, '주유 할인');",
									"",
									"const sendToCarInfo = eval(globals.sendToCarInfo)();",
									"utils.assertExistData(sendToCarInfo, user, '차량전송 정보');",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "chcode",
								"type": "text",
								"value": "{{chcode}}"
							},
							{
								"key": "cp_channel.apcode",
								"type": "text",
								"value": "{{cp_channel.apcode}}"
							},
							{
								"key": "cp_channel.ostype",
								"type": "text",
								"value": "{{cp_channel.ostype}}"
							},
							{
								"key": "tid",
								"type": "text",
								"value": "{{tid}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"mdn\": \"{{minNo_provision_1}}\",\n  \"userKey\": \"{{userKey_provision_1}}\",\n  \"appCode\": \"TMAP_AP_TRANSPORT\",\n  \"chName\": \"tmap\",\n  \"registeredAppList\": [],\n  \"registeredTmapAppList\": [\n    \"TMAP\"\n  ],\n  \"updateRequestDate\": 20191230123030\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/provision-delete-app",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"provision-delete-app"
							]
						},
						"description": "경로 즐겨찾기 조회"
					},
					"response": []
				},
				{
					"name": "09_02_03_Tmap앱 삭제 + 다른 Tmap 앱 사용자 일 때 - 모든 데이터 삭제 안함",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4d909f85-e301-44ea-a614-b3367ab1719a",
								"exec": [
									"const utils = eval(globals.utils)();",
									"const minNo = pm.variables.get('minNo_provision_1');",
									"const userKey = pm.variables.get('userKey_provision_1');",
									"",
									"const registerPoiFavorite = function() {",
									"    const poiFavorite = eval(globals.poiFavorite)();",
									"    const poiUrl = pm.variables.get('host') + poiFavorite.uploadUri;",
									"    let poiUploadBody = poiFavorite.uploadBody;",
									"    poiUploadBody.minNo = minNo;",
									"    poiUploadBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: poiUrl,",
									"        method: 'POST',",
									"        header: utils.getHeader(),",
									"        body: JSON.stringify(poiUploadBody)",
									"    }, function (err, response) {",
									"        pm.test('Pre] poi 데이터 사전 등록', () => pm.expect(response).to.have.status(200));",
									"        registerRouteFavorite();",
									"    });",
									"}",
									"",
									"const registerRouteFavorite = function() {",
									"    const routeFavorite = eval(globals.routeFavorite)();",
									"    const routeUrl = pm.variables.get('host') + routeFavorite.uploadUri;",
									"    let routeUploadBody = routeFavorite.uploadBody;",
									"    routeUploadBody.minNo = minNo;",
									"    routeUploadBody.userKey =  userKey;",
									"    pm.sendRequest({",
									"        url: routeUrl,",
									"        method: 'POST',",
									"        header: utils.getHeader(),",
									"        body: JSON.stringify(routeUploadBody)",
									"    }, function (err, response) {",
									"        pm.test('Pre] 경로 데이터 사전 등록', () => pm.expect(response).to.have.status(200));",
									"        registerRecentDestination();",
									"    });",
									"}",
									"",
									"const registerRecentDestination = function() {",
									"    const poiRecent = eval(globals.poiRecent)();",
									"    const poiRecentUrl = pm.variables.get(\"host\") + poiRecent.uploadUri;",
									"    let poiRecentBody = poiRecent.uploadBody;",
									"    poiRecentBody.minNo = minNo;",
									"    poiRecentBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: poiRecentUrl, ",
									"        async:false,",
									"        method: 'POST',",
									"        header:eval(globals.getHeader)(),",
									"        body: JSON.stringify(poiRecentBody)",
									"    }, function (err, res) {",
									"        pm.test('Pre] 최근길 데이터 사전 등록', () => pm.expect(res).to.have.status(200));",
									"        registerPublicTrafficFavorite();",
									"    });",
									"}",
									"",
									"const registerPublicTrafficFavorite = function() {",
									"    const publicTrafficFavorite = eval(globals.publicTrafficFavorite)();",
									"    const publicTrafficFavoriteUrl = pm.variables.get(\"host\") + publicTrafficFavorite.uploadUri;",
									"    let publicTrafficFavoriteBody = publicTrafficFavorite.registBody;",
									"    publicTrafficFavoriteBody.minNo = minNo;",
									"    publicTrafficFavoriteBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: publicTrafficFavoriteUrl, ",
									"        async:false,",
									"        method: 'POST',",
									"        header:eval(globals.getHeader)(),",
									"        body: JSON.stringify(publicTrafficFavoriteBody)",
									"    }, function (err, res) {",
									"        pm.test('Pre] 대중교통 데이터 사전 등록', () => pm.expect(res).to.have.status(200));",
									"        registerPersonalInfo();",
									"    });",
									"}",
									"",
									"const registerPersonalInfo = function() {",
									"    const personalInfo = eval(globals.personalInfo)();",
									"    const personalInfoUrl = pm.variables.get(\"host\") + personalInfo.uri;",
									"    let personalInfoRegistBody = personalInfo.registBody;",
									"    personalInfoRegistBody.mdn = minNo;",
									"    personalInfoRegistBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: personalInfoUrl, ",
									"        async:false,",
									"        method: 'POST',",
									"        header:eval(globals.getHeader)(),",
									"        body: JSON.stringify(personalInfoRegistBody)",
									"    }, function (err, res) {",
									"        pm.test('Pre] 사용자 프로필  데이터 사전 등록', () => pm.expect(res).to.have.status(200));",
									"        registerCarInfo();",
									"    });",
									"}",
									"",
									"const registerCarInfo = function() {",
									"    const carInfo = eval(globals.carInfo)();",
									"    const carInfoUrl = pm.variables.get(\"host\") + carInfo.uri;",
									"    let carInfoRegistBody = carInfo.registBody;",
									"    carInfoRegistBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: carInfoUrl, ",
									"        async:false,",
									"        method: 'POST',",
									"        header:eval(globals.getHeader)(),",
									"        body: JSON.stringify(carInfoRegistBody)",
									"    }, function (err, res) {",
									"        pm.test('Pre] 차량 프로필  데이터 사전 등록', () => pm.expect(res).to.have.status(200));",
									"        registerOilDcJoin();",
									"    });",
									"}",
									"",
									"const registerOilDcJoin = function() {",
									"    const oilDcJoinInfo = eval(globals.oilDcJoinInfo)();",
									"    const oilDcJoinUrl = pm.variables.get(\"host\") + oilDcJoinInfo.uri;",
									"    let oilDcJoinRegistBody = oilDcJoinInfo.registBody;",
									"    oilDcJoinRegistBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: oilDcJoinUrl, ",
									"        async:false,",
									"        method: 'POST',",
									"        header:eval(globals.getHeader)(),",
									"        body: JSON.stringify(oilDcJoinRegistBody)",
									"    }, function (err, res) {",
									"        pm.test('Pre] 주유할인 가입 정보  데이터 사전 등록', () => pm.expect(res).to.have.status(200));",
									"        registerSendToCar();",
									"    });",
									"}",
									"",
									"const registerSendToCar = function() {",
									"    const sendToCarInfo = eval(globals.sendToCarInfo)();",
									"    const sendToCarInfoUrl = pm.variables.get(\"host\") + sendToCarInfo.uri;",
									"    let sendToCarInfoRegistBody = sendToCarInfo.registBody;",
									"    sendToCarInfoRegistBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: sendToCarInfoUrl, ",
									"        async:false,",
									"        method: 'POST',",
									"        header:eval(globals.getHeader)(),",
									"        body: JSON.stringify(sendToCarInfoRegistBody)",
									"    }, function (err, res) {",
									"        pm.test('Pre] 차량 전송 정보  데이터 사전 등록', () => pm.expect(res).to.have.status(200));",
									"    });",
									"}",
									"",
									"const readyTestData = function() {",
									"    registerPoiFavorite();",
									"}",
									"",
									"readyTestData();",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d001fb65-2db9-406e-8ca7-c3be1f3bfde8",
								"exec": [
									"tests[\"ResponseCode 확인\"] = pm.response.code === 200;",
									"",
									"const resultBody = JSON.parse(responseBody);",
									"tests[\"프로비전 Result 성공\"] = resultBody.result === \"2000\";",
									"",
									"",
									"const utils = eval(globals.utils)();",
									"const minNo = pm.variables.get('minNo_provision_1');",
									"const userKey = pm.variables.get('userKey_provision_1');",
									"const user = {type: \"HEIMDALL\", key: userKey};",
									"",
									"// 모든 데이터 존재 확인",
									"const poiFavorite = eval(globals.poiFavorite)();",
									"utils.assertExistData(poiFavorite, user, 'POI');",
									"",
									"const publicTrafficFavorite = eval(globals.publicTrafficFavorite)();",
									"utils.assertExistData(publicTrafficFavorite, user, '대중교통');",
									"",
									"const routeFavorite = eval(globals.routeFavorite)();",
									"utils.assertExistData(routeFavorite, user, '경로');",
									"",
									"const poiRecent = eval(globals.poiRecent)();",
									"utils.assertExistData(poiRecent, user, '최근길');",
									"",
									"const personalInfo = eval(globals.personalInfo)();",
									"utils.assertExistData(personalInfo, user, '사용자 프로필');",
									"",
									"const carInfo = eval(globals.carInfo)();",
									"utils.assertExistData(carInfo, user, '차량 프로필');",
									"",
									"const oilDcJoinInfo = eval(globals.oilDcJoinInfo)();",
									"utils.assertExistData(oilDcJoinInfo, user, '주유 할인');",
									"",
									"const sendToCarInfo = eval(globals.sendToCarInfo)();",
									"utils.assertExistData(sendToCarInfo, user, '차량전송 정보');",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "chcode",
								"type": "text",
								"value": "{{chcode}}"
							},
							{
								"key": "cp_channel.apcode",
								"type": "text",
								"value": "{{cp_channel.apcode}}"
							},
							{
								"key": "cp_channel.ostype",
								"type": "text",
								"value": "{{cp_channel.ostype}}"
							},
							{
								"key": "tid",
								"type": "text",
								"value": "{{tid}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"mdn\": \"{{minNo_provision_1}}\",\n  \"userKey\": \"{{userKey_provision_1}}\",\n  \"appCode\": \"TMAP\",\n  \"chName\": \"tmap\",\n  \"registeredAppList\": [],\n  \"registeredTmapAppList\": [\n    \"TMAP_KIA\"\n  ],\n  \"updateRequestDate\": 20191230123030\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/provision-delete-app",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"provision-delete-app"
							]
						},
						"description": "경로 즐겨찾기 조회"
					},
					"response": []
				},
				{
					"name": "09_02_04_Tmap앱 삭제 + 다른 Tmap앱 사용자 아님 + Tmap대중교통 사용자가 아닐 때  - 모든  데이터 삭제",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4d909f85-e301-44ea-a614-b3367ab1719a",
								"exec": [
									"const utils = eval(globals.utils)();",
									"const minNo = pm.variables.get('minNo_provision_1');",
									"const userKey = pm.variables.get('userKey_provision_1');",
									"",
									"const registerPoiFavorite = function() {",
									"    const poiFavorite = eval(globals.poiFavorite)();",
									"    const poiUrl = pm.variables.get('host') + poiFavorite.uploadUri;",
									"    let poiUploadBody = poiFavorite.uploadBody;",
									"    poiUploadBody.minNo = minNo;",
									"    poiUploadBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: poiUrl,",
									"        method: 'POST',",
									"        header: utils.getHeader(),",
									"        body: JSON.stringify(poiUploadBody)",
									"    }, function (err, response) {",
									"        pm.test('Pre] poi 데이터 사전 등록', () => pm.expect(response).to.have.status(200));",
									"        registerRouteFavorite();",
									"    });",
									"}",
									"",
									"const registerRouteFavorite = function() {",
									"    const routeFavorite = eval(globals.routeFavorite)();",
									"    const routeUrl = pm.variables.get('host') + routeFavorite.uploadUri;",
									"    let routeUploadBody = routeFavorite.uploadBody;",
									"    routeUploadBody.minNo = minNo;",
									"    routeUploadBody.userKey =  userKey;",
									"    pm.sendRequest({",
									"        url: routeUrl,",
									"        method: 'POST',",
									"        header: utils.getHeader(),",
									"        body: JSON.stringify(routeUploadBody)",
									"    }, function (err, response) {",
									"        pm.test('Pre] 경로 데이터 사전 등록', () => pm.expect(response).to.have.status(200));",
									"        registerRecentDestination();",
									"    });",
									"}",
									"",
									"const registerRecentDestination = function() {",
									"    const poiRecent = eval(globals.poiRecent)();",
									"    const poiRecentUrl = pm.variables.get(\"host\") + poiRecent.uploadUri;",
									"    let poiRecentBody = poiRecent.uploadBody;",
									"    poiRecentBody.minNo = minNo;",
									"    poiRecentBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: poiRecentUrl, ",
									"        async:false,",
									"        method: 'POST',",
									"        header:eval(globals.getHeader)(),",
									"        body: JSON.stringify(poiRecentBody)",
									"    }, function (err, res) {",
									"        pm.test('Pre] 최근길 데이터 사전 등록', () => pm.expect(res).to.have.status(200));",
									"        registerPublicTrafficFavorite();",
									"    });",
									"}",
									"",
									"const registerPublicTrafficFavorite = function() {",
									"    const publicTrafficFavorite = eval(globals.publicTrafficFavorite)();",
									"    const publicTrafficFavoriteUrl = pm.variables.get(\"host\") + publicTrafficFavorite.uploadUri;",
									"    let publicTrafficFavoriteBody = publicTrafficFavorite.registBody;",
									"    publicTrafficFavoriteBody.minNo = minNo;",
									"    publicTrafficFavoriteBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: publicTrafficFavoriteUrl, ",
									"        async:false,",
									"        method: 'POST',",
									"        header:eval(globals.getHeader)(),",
									"        body: JSON.stringify(publicTrafficFavoriteBody)",
									"    }, function (err, res) {",
									"        pm.test('Pre] 대중교통 데이터 사전 등록', () => pm.expect(res).to.have.status(200));",
									"        registerPersonalInfo();",
									"    });",
									"}",
									"",
									"const registerPersonalInfo = function() {",
									"    const personalInfo = eval(globals.personalInfo)();",
									"    const personalInfoUrl = pm.variables.get(\"host\") + personalInfo.uri;",
									"    let personalInfoRegistBody = personalInfo.registBody;",
									"    personalInfoRegistBody.mdn = minNo;",
									"    personalInfoRegistBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: personalInfoUrl, ",
									"        async:false,",
									"        method: 'POST',",
									"        header:eval(globals.getHeader)(),",
									"        body: JSON.stringify(personalInfoRegistBody)",
									"    }, function (err, res) {",
									"        pm.test('Pre] 사용자 프로필  데이터 사전 등록', () => pm.expect(res).to.have.status(200));",
									"        registerCarInfo();",
									"    });",
									"}",
									"",
									"const registerCarInfo = function() {",
									"    const carInfo = eval(globals.carInfo)();",
									"    const carInfoUrl = pm.variables.get(\"host\") + carInfo.uri;",
									"    let carInfoRegistBody = carInfo.registBody;",
									"    carInfoRegistBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: carInfoUrl, ",
									"        async:false,",
									"        method: 'POST',",
									"        header:eval(globals.getHeader)(),",
									"        body: JSON.stringify(carInfoRegistBody)",
									"    }, function (err, res) {",
									"        pm.test('Pre] 차량 프로필  데이터 사전 등록', () => pm.expect(res).to.have.status(200));",
									"        registerOilDcJoin();",
									"    });",
									"}",
									"",
									"const registerOilDcJoin = function() {",
									"    const oilDcJoinInfo = eval(globals.oilDcJoinInfo)();",
									"    const oilDcJoinUrl = pm.variables.get(\"host\") + oilDcJoinInfo.uri;",
									"    let oilDcJoinRegistBody = oilDcJoinInfo.registBody;",
									"    oilDcJoinRegistBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: oilDcJoinUrl, ",
									"        async:false,",
									"        method: 'POST',",
									"        header:eval(globals.getHeader)(),",
									"        body: JSON.stringify(oilDcJoinRegistBody)",
									"    }, function (err, res) {",
									"        pm.test('Pre] 주유할인 가입 정보  데이터 사전 등록', () => pm.expect(res).to.have.status(200));",
									"        registerSendToCar();",
									"    });",
									"}",
									"",
									"const registerSendToCar = function() {",
									"    const sendToCarInfo = eval(globals.sendToCarInfo)();",
									"    const sendToCarInfoUrl = pm.variables.get(\"host\") + sendToCarInfo.uri;",
									"    let sendToCarInfoRegistBody = sendToCarInfo.registBody;",
									"    sendToCarInfoRegistBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: sendToCarInfoUrl, ",
									"        async:false,",
									"        method: 'POST',",
									"        header:eval(globals.getHeader)(),",
									"        body: JSON.stringify(sendToCarInfoRegistBody)",
									"    }, function (err, res) {",
									"        pm.test('Pre] 차량 전송 정보  데이터 사전 등록', () => pm.expect(res).to.have.status(200));",
									"    });",
									"}",
									"",
									"const readyTestData = function() {",
									"    registerPoiFavorite();",
									"}",
									"",
									"readyTestData();",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d001fb65-2db9-406e-8ca7-c3be1f3bfde8",
								"exec": [
									"tests[\"ResponseCode 확인\"] = pm.response.code === 200;",
									"",
									"const resultBody = JSON.parse(responseBody);",
									"tests[\"프로비전 Result 성공\"] = resultBody.result === \"2000\";",
									"",
									"",
									"const utils = eval(globals.utils)();",
									"const minNo = pm.variables.get('minNo_provision_1');",
									"const userKey = pm.variables.get('userKey_provision_1');",
									"const user = {type: \"HEIMDALL\", key: userKey};",
									"",
									"// 모든 데이터 삭제 확인",
									"const poiFavorite = eval(globals.poiFavorite)();",
									"utils.assertEmptyData(poiFavorite, user, 'POI');",
									"",
									"const publicTrafficFavorite = eval(globals.publicTrafficFavorite)();",
									"utils.assertEmptyData(publicTrafficFavorite, user, '대중교통');",
									"",
									"const routeFavorite = eval(globals.routeFavorite)();",
									"utils.assertEmptyData(routeFavorite, user, '경로');",
									"",
									"const poiRecent = eval(globals.poiRecent)();",
									"utils.assertEmptyData(poiRecent, user, '최근길');",
									"",
									"const personalInfo = eval(globals.personalInfo)();",
									"utils.assertEmptyData(personalInfo, user, '사용자 프로필');",
									"",
									"const carInfo = eval(globals.carInfo)();",
									"utils.assertEmptyData(carInfo, user, '차량 프로필');",
									"",
									"const oilDcJoinInfo = eval(globals.oilDcJoinInfo)();",
									"utils.assertExistData(oilDcJoinInfo, user, '주유 할인');",
									"",
									"const sendToCarInfo = eval(globals.sendToCarInfo)();",
									"utils.assertEmptyData(sendToCarInfo, user, '차량전송 정보');",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "chcode",
								"type": "text",
								"value": "{{chcode}}"
							},
							{
								"key": "cp_channel.apcode",
								"type": "text",
								"value": "{{cp_channel.apcode}}"
							},
							{
								"key": "cp_channel.ostype",
								"type": "text",
								"value": "{{cp_channel.ostype}}"
							},
							{
								"key": "tid",
								"type": "text",
								"value": "{{tid}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"mdn\": \"{{minNo_provision_1}}\",\n  \"userKey\": \"{{userKey_provision_1}}\",\n  \"appCode\": \"TMAP\",\n  \"chName\": \"tmap\",\n  \"registeredAppList\": [],\n  \"registeredTmapAppList\": [],\n  \"updateRequestDate\": 20191230123030\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/provision-delete-app",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"provision-delete-app"
							]
						},
						"description": "경로 즐겨찾기 조회"
					},
					"response": []
				},
				{
					"name": "09_02_05_Tmap앱 삭제 + 다른 Tmap앱 사용자 아님 + Tmap대중교통 사용자일 때  - Tmap 전용 데이터만 삭제",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4d909f85-e301-44ea-a614-b3367ab1719a",
								"exec": [
									"const utils = eval(globals.utils)();",
									"const minNo = pm.variables.get('minNo_provision_1');",
									"const userKey = pm.variables.get('userKey_provision_1');",
									"",
									"const registerPoiFavorite = function() {",
									"    const poiFavorite = eval(globals.poiFavorite)();",
									"    const poiUrl = pm.variables.get('host') + poiFavorite.uploadUri;",
									"    let poiUploadBody = poiFavorite.uploadBody;",
									"    poiUploadBody.minNo = minNo;",
									"    poiUploadBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: poiUrl,",
									"        method: 'POST',",
									"        header: utils.getHeader(),",
									"        body: JSON.stringify(poiUploadBody)",
									"    }, function (err, response) {",
									"        pm.test('Pre] poi 데이터 사전 등록', () => pm.expect(response).to.have.status(200));",
									"        registerRouteFavorite();",
									"    });",
									"}",
									"",
									"const registerRouteFavorite = function() {",
									"    const routeFavorite = eval(globals.routeFavorite)();",
									"    const routeUrl = pm.variables.get('host') + routeFavorite.uploadUri;",
									"    let routeUploadBody = routeFavorite.uploadBody;",
									"    routeUploadBody.minNo = minNo;",
									"    routeUploadBody.userKey =  userKey;",
									"    pm.sendRequest({",
									"        url: routeUrl,",
									"        method: 'POST',",
									"        header: utils.getHeader(),",
									"        body: JSON.stringify(routeUploadBody)",
									"    }, function (err, response) {",
									"        pm.test('Pre] 경로 데이터 사전 등록', () => pm.expect(response).to.have.status(200));",
									"        registerRecentDestination();",
									"    });",
									"}",
									"",
									"const registerRecentDestination = function() {",
									"    const poiRecent = eval(globals.poiRecent)();",
									"    const poiRecentUrl = pm.variables.get(\"host\") + poiRecent.uploadUri;",
									"    let poiRecentBody = poiRecent.uploadBody;",
									"    poiRecentBody.minNo = minNo;",
									"    poiRecentBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: poiRecentUrl, ",
									"        async:false,",
									"        method: 'POST',",
									"        header:eval(globals.getHeader)(),",
									"        body: JSON.stringify(poiRecentBody)",
									"    }, function (err, res) {",
									"        pm.test('Pre] 최근길 데이터 사전 등록', () => pm.expect(res).to.have.status(200));",
									"        registerPublicTrafficFavorite();",
									"    });",
									"}",
									"",
									"const registerPublicTrafficFavorite = function() {",
									"    const publicTrafficFavorite = eval(globals.publicTrafficFavorite)();",
									"    const publicTrafficFavoriteUrl = pm.variables.get(\"host\") + publicTrafficFavorite.uploadUri;",
									"    let publicTrafficFavoriteBody = publicTrafficFavorite.registBody;",
									"    publicTrafficFavoriteBody.minNo = minNo;",
									"    publicTrafficFavoriteBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: publicTrafficFavoriteUrl, ",
									"        async:false,",
									"        method: 'POST',",
									"        header:eval(globals.getHeader)(),",
									"        body: JSON.stringify(publicTrafficFavoriteBody)",
									"    }, function (err, res) {",
									"        pm.test('Pre] 대중교통 데이터 사전 등록', () => pm.expect(res).to.have.status(200));",
									"        registerPersonalInfo();",
									"    });",
									"}",
									"",
									"const registerPersonalInfo = function() {",
									"    const personalInfo = eval(globals.personalInfo)();",
									"    const personalInfoUrl = pm.variables.get(\"host\") + personalInfo.uri;",
									"    let personalInfoRegistBody = personalInfo.registBody;",
									"    personalInfoRegistBody.mdn = minNo;",
									"    personalInfoRegistBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: personalInfoUrl, ",
									"        async:false,",
									"        method: 'POST',",
									"        header:eval(globals.getHeader)(),",
									"        body: JSON.stringify(personalInfoRegistBody)",
									"    }, function (err, res) {",
									"        pm.test('Pre] 사용자 프로필  데이터 사전 등록', () => pm.expect(res).to.have.status(200));",
									"        registerCarInfo();",
									"    });",
									"}",
									"",
									"const registerCarInfo = function() {",
									"    const carInfo = eval(globals.carInfo)();",
									"    const carInfoUrl = pm.variables.get(\"host\") + carInfo.uri;",
									"    let carInfoRegistBody = carInfo.registBody;",
									"    carInfoRegistBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: carInfoUrl, ",
									"        async:false,",
									"        method: 'POST',",
									"        header:eval(globals.getHeader)(),",
									"        body: JSON.stringify(carInfoRegistBody)",
									"    }, function (err, res) {",
									"        pm.test('Pre] 차량 프로필  데이터 사전 등록', () => pm.expect(res).to.have.status(200));",
									"        registerOilDcJoin();",
									"    });",
									"}",
									"",
									"const registerOilDcJoin = function() {",
									"    const oilDcJoinInfo = eval(globals.oilDcJoinInfo)();",
									"    const oilDcJoinUrl = pm.variables.get(\"host\") + oilDcJoinInfo.uri;",
									"    let oilDcJoinRegistBody = oilDcJoinInfo.registBody;",
									"    oilDcJoinRegistBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: oilDcJoinUrl, ",
									"        async:false,",
									"        method: 'POST',",
									"        header:eval(globals.getHeader)(),",
									"        body: JSON.stringify(oilDcJoinRegistBody)",
									"    }, function (err, res) {",
									"        pm.test('Pre] 주유할인 가입 정보  데이터 사전 등록', () => pm.expect(res).to.have.status(200));",
									"        registerSendToCar();",
									"    });",
									"}",
									"",
									"const registerSendToCar = function() {",
									"    const sendToCarInfo = eval(globals.sendToCarInfo)();",
									"    const sendToCarInfoUrl = pm.variables.get(\"host\") + sendToCarInfo.uri;",
									"    let sendToCarInfoRegistBody = sendToCarInfo.registBody;",
									"    sendToCarInfoRegistBody.userKey = userKey;",
									"    pm.sendRequest({",
									"        url: sendToCarInfoUrl, ",
									"        async:false,",
									"        method: 'POST',",
									"        header:eval(globals.getHeader)(),",
									"        body: JSON.stringify(sendToCarInfoRegistBody)",
									"    }, function (err, res) {",
									"        pm.test('Pre] 차량 전송 정보  데이터 사전 등록', () => pm.expect(res).to.have.status(200));",
									"    });",
									"}",
									"",
									"const readyTestData = function() {",
									"    registerPoiFavorite();",
									"}",
									"",
									"readyTestData();",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d001fb65-2db9-406e-8ca7-c3be1f3bfde8",
								"exec": [
									"tests[\"ResponseCode 확인\"] = pm.response.code === 200;",
									"",
									"const resultBody = JSON.parse(responseBody);",
									"tests[\"프로비전 Result 성공\"] = resultBody.result === \"2000\";",
									"",
									"",
									"const utils = eval(globals.utils)();",
									"const minNo = pm.variables.get('minNo_provision_1');",
									"const userKey = pm.variables.get('userKey_provision_1');",
									"const user = {type: \"HEIMDALL\", key: userKey};",
									"",
									"// Tmap 전용 데이터 삭제 확인",
									"const poiFavorite = eval(globals.poiFavorite)();",
									"utils.assertEmptyData(poiFavorite, user, 'POI');",
									"",
									"const routeFavorite = eval(globals.routeFavorite)();",
									"utils.assertEmptyData(routeFavorite, user, '경로');",
									"",
									"const poiRecent = eval(globals.poiRecent)();",
									"utils.assertEmptyData(poiRecent, user, '최근길');",
									"",
									"const personalInfo = eval(globals.personalInfo)();",
									"utils.assertEmptyData(personalInfo, user, '사용자 프로필');",
									"",
									"const carInfo = eval(globals.carInfo)();",
									"utils.assertEmptyData(carInfo, user, '차량 프로필');",
									"",
									"const oilDcJoinInfo = eval(globals.oilDcJoinInfo)();",
									"utils.assertExistData(oilDcJoinInfo, user, '주유 할인');",
									"",
									"const sendToCarInfo = eval(globals.sendToCarInfo)();",
									"utils.assertEmptyData(sendToCarInfo, user, '차량전송 정보');",
									"",
									"",
									"// 다른 데이터 존재 확인 : 대중교통, 집/회사 정보",
									"const publicTrafficFavorite = eval(globals.publicTrafficFavorite)();",
									"utils.assertExistData(publicTrafficFavorite, user, '대중교통');",
									"",
									"const poiGetUrl = pm.variables.get('host') + poiFavorite.uri + '?myFavoriteYn=Y&userKey=' + userKey;",
									"pm.sendRequest({",
									"    url: poiGetUrl,",
									"    method: 'GET',",
									"    header: utils.getHeader(),",
									"}, function (err, response) {",
									"    const poiResponse = response.json();",
									"    console.log(poiResponse);",
									"    pm.test(\"집/회사 정보 있음\", () => pm.expect(poiResponse.poiMyFavorite != null && poiResponse.poiMyFavorite.homeCustName != null && poiResponse.poiMyFavorite.officeCustName != null).to.eql(true));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "chcode",
								"type": "text",
								"value": "{{chcode}}"
							},
							{
								"key": "cp_channel.apcode",
								"type": "text",
								"value": "{{cp_channel.apcode}}"
							},
							{
								"key": "cp_channel.ostype",
								"type": "text",
								"value": "{{cp_channel.ostype}}"
							},
							{
								"key": "tid",
								"type": "text",
								"value": "{{tid}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"mdn\": \"{{minNo_provision_1}}\",\n  \"userKey\": \"{{userKey_provision_1}}\",\n  \"appCode\": \"TMAP\",\n  \"chName\": \"tmap\",\n  \"registeredAppList\": [\n    \"TMAP_AP_TRANSPORT\"\n  ],\n  \"registeredTmapAppList\": [],\n  \"updateRequestDate\": 20191230123030\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/provision-delete-app",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"provision-delete-app"
							]
						},
						"description": "경로 즐겨찾기 조회"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "09_03_사용자 프로파일 정보 배포",
			"item": [
				{
					"name": "09_03_01_기존 등록된 상태에서 고객정보 저장 성공",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba4336db-8626-4133-a944-7bff931b9e50",
								"exec": [
									"tests[\"Response Code 확인\"] = pm.response.code === 200;",
									"const resultBody = JSON.parse(responseBody);",
									"tests[\"Result 확인\"] = resultBody.result === \"2000\";"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d00f8dce-c666-4332-a775-7fe8285915b4",
								"exec": [
									"const personalInfo = eval(globals.personalInfo)();",
									"const url = pm.variables.get(\"host\") + personalInfo.uri;",
									"let body = personalInfo.registBody;",
									"body.userKey = pm.variables.get('userKey_provision_1');",
									"pm.sendRequest({",
									"    url: url, ",
									"    async:false,",
									"    method: 'POST',",
									"    header:eval(globals.getHeader)(),",
									"    body: JSON.stringify(body)",
									"}, function (err, res) {",
									"   console.log(res);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "chcode",
								"value": "{{chcode}}",
								"type": "text"
							},
							{
								"key": "cp_channel.apcode",
								"value": "{{cp_channel.apcode}}",
								"type": "text"
							},
							{
								"key": "cp_channel.ostype",
								"value": "{{cp_channel.ostype}}",
								"type": "text"
							},
							{
								"key": "tid",
								"value": "{{tid}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"birth\": 19880505,\n  \"email\": \"test@sk.com\",\n  \"mdn\": \"01000000000\",\n  \"sourceType\": \"test\",\n  \"updateRequestDate\": 20190705114015,\n  \"userKey\": \"{{userKey_provision_1}}\",\n  \"userName\": \"test\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v1/notify-user-profile-info",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"notify-user-profile-info"
							]
						}
					},
					"response": []
				},
				{
					"name": "09_03_02_이메일,휴대폰번호 고객정보 저장 되는것 확인",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba4336db-8626-4133-a944-7bff931b9e50",
								"exec": [
									"tests[\"Response Code 확인\"] = pm.response.code === 200;",
									"const resultBody = JSON.parse(responseBody);",
									"tests[\"Result 확인\"] = resultBody.result === \"2000\";",
									"const personalInfo = eval(globals.personalInfo)();",
									"const url = pm.variables.get(\"host\") + personalInfo.uri + \"?userKey=\"+pm.variables.get('userKey_provision_1');",
									"const body = personalInfo.registBody;",
									"pm.sendRequest({",
									"    url: url, ",
									"    async:false,",
									"    method: 'GET',",
									"    header:eval(globals.getHeader)()",
									"}, function (err, res) {",
									"   pm.test(\"MDN 확인\", () => res.mdn === body.mdn);",
									"   pm.test(\"email 확인\", () => res.email === body.email);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d00f8dce-c666-4332-a775-7fe8285915b4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "chcode",
								"type": "text",
								"value": "{{chcode}}"
							},
							{
								"key": "cp_channel.apcode",
								"type": "text",
								"value": "{{cp_channel.apcode}}"
							},
							{
								"key": "cp_channel.ostype",
								"type": "text",
								"value": "{{cp_channel.ostype}}"
							},
							{
								"key": "tid",
								"type": "text",
								"value": "{{tid}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"birth\": 19880505,\n  \"email\": \"test@sk.com\",\n  \"mdn\": \"01000000000\",\n  \"sourceType\": \"test\",\n  \"updateRequestDate\": 20190705114015,\n  \"userKey\": \"{{userKey_provision_1}}\",\n  \"userName\": \"test\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v1/notify-user-profile-info",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"notify-user-profile-info"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "eb70c9c2-55b8-4e23-89b6-67b8416fac01",
				"type": "text/javascript",
				"exec": [
					"postman.setGlobalVariable('checkDataTransfer', (type, oldUser, newUser, messageKey) => {",
					"  let uri = pm.variables.get('host') + type.uri+(oldUser.type==\"MDN\"?\"?minNo=\":\"?userKey=\")+oldUser.key;",
					"  pm.sendRequest({",
					"      url: uri,",
					"      method: 'GET'",
					"  }, function (err, response) {",
					"      pm.test(messageKey+' 이전 데이터 없음 확인', () => {",
					"          pm.expect(response).to.have.status(200); ",
					"          const responseBody = response.json();",
					"          pm.expect(responseBody.code).to.have.eq('POI04001R');",
					"          pm.expect(responseBody.reasonCode).to.have.eq('NULLRESULT_ERROR');",
					"      });",
					"  });",
					"  uri = pm.variables.get('host') + type.uri+(newUser.type==\"MDN\"?\"?minNo=\":\"?userKey=\")+newUser.key;",
					"  pm.sendRequest({",
					"      url: uri,",
					"      method: 'GET'",
					"  }, function (err, response) {",
					"      pm.test(messageKey+' 신규 데이터 존재 확인', () => pm.expect(response).to.have.status(200));",
					"  });",
					"});",
					"",
					"postman.setGlobalVariable('routeFavorite', () => {",
					"    return {",
					"        uri: \"/api/v1/route-favorite\",",
					"        uploadUri: \"/api/v1/route-favorite/upload\",",
					"        registBody: {",
					"          \"minNo\": \"{{minNo}}\",",
					"          \"userKey\": \"{{userKey}}\",",
					"          \"routeFavoriteRegistDtos\": [",
					"            {",
					"              \"routeTitle\": \"첫번째 경로\",",
					"              \"startRouteDto\": {",
					"                \"name\": \"파인애비뉴\",",
					"                \"navX\": \"4571653\",",
					"                \"navY\": \"1352256\",",
					"                \"poiId\": \"2786471\",",
					"                \"rpFlag\": 17",
					"              },",
					"              \"midRouteDtos\": [",
					"              \t{",
					"                \t\"name\": \"왕십리 이마트점\",",
					"                    \"navX\": \"4573465\",",
					"                    \"navY\": \"1352064\",",
					"                    \"poiId\": \"1551025\",",
					"                    \"rpFlag\": 8\t",
					"            \t}",
					"              ],",
					"              \"endRouteDto\": {",
					"                \"name\": \"천호역[8호선]\",",
					"                \"navX\": \"4576526\",",
					"                \"navY\": \"1351314\",",
					"                \"poiId\": \"280407\",",
					"                \"rpFlag\": 5",
					"              }",
					"            }",
					"          ]",
					"        },",
					"        removeBody: {",
					"          \"minNo\": \"{{minNo}}\",",
					"          \"userKey\": \"{{userKey}}\",",
					"          \"routeFavoriteRegistDtos\": [",
					"            {",
					"              \"routeTitle\": \"첫번째 경로\",",
					"              \"startRouteDto\": {",
					"                \"name\": \"파인애비뉴\",",
					"                \"navX\": \"4571653\",",
					"                \"navY\": \"1352256\",",
					"                \"poiId\": \"2786471\",",
					"                \"rpFlag\": 17",
					"              },",
					"              \"midRouteDtos\": [",
					"              \t{",
					"                \t\"name\": \"왕십리 이마트점\",",
					"                    \"navX\": \"4573465\",",
					"                    \"navY\": \"1352064\",",
					"                    \"poiId\": \"1551025\",",
					"                    \"rpFlag\": 8\t",
					"            \t}",
					"              ],",
					"              \"endRouteDto\": {",
					"                \"name\": \"천호역[8호선]\",",
					"                \"navX\": \"4576526\",",
					"                \"navY\": \"1351314\",",
					"                \"poiId\": \"280407\",",
					"                \"rpFlag\": 5",
					"              }",
					"            }",
					"          ]",
					"        },",
					"        uploadBody: {",
					"          \"minNo\": \"{{minNo}}\",",
					"          \"userKey\": \"{{userKey}}\",",
					"          \"routeFavoriteRegistDtos\": [",
					"            {",
					"              \"routeTitle\": \"첫번째 경로\",",
					"              \"startRouteDto\": {",
					"                \"name\": \"파인애비뉴\",",
					"                \"navX\": \"4571653\",",
					"                \"navY\": \"1352256\",",
					"                \"poiId\": \"2786471\",",
					"                \"rpFlag\": 17",
					"              },",
					"              \"midRouteDtos\": [",
					"              \t{",
					"                \t\"name\": \"왕십리 이마트점\",",
					"                    \"navX\": \"4573465\",",
					"                    \"navY\": \"1352064\",",
					"                    \"poiId\": \"1551025\",",
					"                    \"rpFlag\": 8\t",
					"            \t}",
					"              ],",
					"              \"endRouteDto\": {",
					"                \"name\": \"천호역[8호선]\",",
					"                \"navX\": \"4576526\",",
					"                \"navY\": \"1351314\",",
					"                \"poiId\": \"280407\",",
					"                \"rpFlag\": 5",
					"              }",
					"            }",
					"          ],",
					"          \"routeMyFavoriteRegistDto\": {",
					"              \"routeTitle\": \"즐겨찾는 경로\",",
					"              \"startRouteDto\": {",
					"                \"name\": \"경기도 고양시 덕양구 관산동\",",
					"                \"navX\": \"4567288\",",
					"                \"navY\": \"1357906\",",
					"                \"poiId\": null,",
					"                \"rpFlag\": 0",
					"              },",
					"              \"endRouteDto\": {",
					"                \"name\": \"월곶풍림아이원1차아파트\",",
					"                \"navX\": \"4562665\",",
					"                \"navY\": \"1345941\",",
					"                \"poiId\": \"719365\",",
					"                \"rpFlag\": 0",
					"              },",
					"              \"midRouteDto1\": {",
					"                  \"name\": \"경유지1\",",
					"                  \"navX\": \"4562665\",",
					"                  \"navY\": \"1345941\",",
					"                  \"poiId\": \"719365\",",
					"                  \"rpFlag\": 0",
					"              },",
					"              \"midRouteDto2\": {",
					"                  \"name\": \"경유지2\",",
					"                  \"navX\": \"4562665\",",
					"                  \"navY\": \"1345941\",",
					"                  \"poiId\": \"719365\",",
					"                  \"rpFlag\": 0",
					"              }",
					"          },",
					"          \"uploadOption\": \"FI_MS\"",
					"        }",
					"    }",
					"});",
					"",
					"",
					"postman.setGlobalVariable('publicTrafficFavorite', () => {",
					"    return {",
					"        uri: '/api/v1/public-traffic-favorite',",
					"        uploadUri: '/api/v1/public-traffic-favorite/upload',",
					"        registBody: {",
					"          \"minNo\": \"{{minNo}}\",",
					"          \"publicTrafficFavorites\": [",
					"            {",
					"              \"addInfo\": \"1@2@3\",",
					"              \"blid\": 1,",
					"              \"blidRt\": 0,",
					"              \"busType\": 4,",
					"              \"category\": 1,",
					"              \"endId\": 222222222,",
					"              \"flagDest\": 2,",
					"              \"flagStart\": 3,",
					"              \"laneVal\": \"5,2,525,524@1371,1,112015,100456\",",
					"              \"locationCodeDest\": 2000,",
					"              \"locationCodeStart\": 1000,",
					"              \"locationName\": \"도착지 지역 명칭\",",
					"              \"name\": \"신상초등학교\",",
					"              \"navSeq\": 0,",
					"              \"poiDestX\": 4585822,",
					"              \"poiDestY\": 1275041,",
					"              \"poiId\": 7490572,",
					"              \"poiNameDest\": \"도착지 명칭\",",
					"              \"poiNameStart\": \"출발지 명칭\",",
					"              \"poiStartX\": 4585822,",
					"              \"poiStartY\": 1275041,",
					"              \"routeType\": \"시내\",",
					"              \"rpFlag\": 1,",
					"              \"rpFlagDest\": 2,",
					"              \"rpFlagStart\": 1,",
					"              \"sid\": 1,",
					"              \"sidRt\": \"01049\",",
					"              \"startId\": 111111111,",
					"              \"subName\": 262,",
					"              \"subViewSeq\": 2,",
					"              \"subwayType\": \"수도권1호선\",",
					"              \"toStation\": \"방면명칭1\",",
					"              \"viewSeq\": 1",
					"            }",
					"          ],",
					"          \"userKey\": \"{{userKey}}\"",
					"        },",
					"        removeBody: {",
					"          \"publicTrafficFavorites\": [],",
					"          \"userKey\": \"{{userKey}}\"",
					"        }",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable('poiFavorite', () => {",
					"    return {",
					"        \"uri\": \"/api/v1/poi-favorite\",",
					"        \"uploadUri\": \"/api/v1/poi-favorite/upload\",",
					"        \"registBody\": {",
					"            \"minNo\": \"{{minNo}}\",",
					"            \"userKey\": \"{{userKey}}\",",
					"            \"poiFavorites\": [",
					"                {",
					"                    \"addInfo\": null,",
					"                    \"custName\": \"파인애비뉴\",",
					"                    \"iconInfo\": \"/별/\",",
					"                    \"insDatetime\": null,",
					"                    \"navSeq\": \"0\",",
					"                    \"noorX\": \"4571653\",",
					"                    \"noorY\": \"1352256\",",
					"                    \"orgCustName\": \"\",",
					"                    \"poiId\": 2786471,",
					"                    \"rpFlag\": 17",
					"                }",
					"            ]",
					"        },",
					"        \"uploadBody\": {",
					"            \"minNo\": \"{{minNo}}\",",
					"            \"userKey\": \"{{userKey}}\",",
					"            \"uploadOption\": \"FI_MS\",",
					"            \"poiFavorites\": [",
					"                {",
					"                    \"addInfo\": null,",
					"                    \"custName\": \"파인애비뉴\",",
					"                    \"iconInfo\": \"/별/\",",
					"                    \"insDatetime\": null,",
					"                    \"navSeq\": \"0\",",
					"                    \"noorX\": \"4571653\",",
					"                    \"noorY\": \"1352256\",",
					"                    \"orgCustName\": \"\",",
					"                    \"poiId\": 2786471,",
					"                    \"rpFlag\": 17",
					"                }",
					"            ],",
					"            \"poiMyFavorite\": {",
					"                \"homeAddInfo\": null,",
					"                \"homeCustName\": \"신금호파크자이\",",
					"                \"homeNavSeq\": \"0\",",
					"                \"homeNoorX\": 4572788,",
					"                \"homeNoorY\": 1351920,",
					"                \"homePoiId\": 6092066,",
					"                \"homeRpFlag\": 16,",
					"                \"officeAddInfo\": null,",
					"                \"officeCustName\": \"파인애비뉴\",",
					"                \"officeNavSeq\": \"0\",",
					"                \"officeNoorX\": 4571653,",
					"                \"officeNoorY\": 1352256,",
					"                \"officePoiId\": 2786471,",
					"                \"officeRpFlag\": 17",
					"            }",
					"        },",
					"        \"removeBody\": {",
					"            \"minNo\": \"{{minNo}}\",",
					"            \"userKey\": \"{{userKey}}\",",
					"            \"poiFavorites\": [",
					"                {",
					"                    \"custName\": \"파인애비뉴\",",
					"                    \"noorX\": \"4571653\",",
					"                    \"noorY\": \"1352256\"",
					"                },",
					"                {",
					"                    \"custName\": \"SK남산빌딩\",",
					"                    \"noorX\": \"4571201\",",
					"                    \"noorY\": \"1351937\"",
					"                }",
					"            ]",
					"        },",
					"        \"modifyBody\": {",
					"            \"minNo\": \"{{minNo}}\",",
					"            \"userKey\": \"{{userKey}}\",",
					"            \"poiFavorite\": {",
					"                \"custName\": \"파인애비뉴\",",
					"                \"iconInfo\": \"/하트/\",",
					"                \"newCustName\": \"을지로3가 파인애비뉴\",",
					"                \"noorX\": \"4571653\",",
					"                \"noorY\": \"1352256\"",
					"            }",
					"        }",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable('poiRecent', () => {",
					"    return {",
					"        \"uri\": \"/api/v1/poi-recent-destination\",",
					"        \"uploadUri\": \"/api/v1/poi-recent-destination/upload\",",
					"        \"registBody\": {",
					"          \"custName\": \"강남역5\",",
					"          \"minNo\": \"{{minNo}}\",",
					"          \"navSeq\": 0,",
					"          \"noorX\": 4571041,",
					"          \"noorY\": 1352921,",
					"          \"poiId\": 432108,",
					"          \"rpFlag\": 16,",
					"          \"userKey\": \"{{userKey}}\"",
					"        },",
					"        \"uploadBody\": {",
					"          \"minNo\": \"{{minNo}}\",",
					"          \"poiRecentUploads\": [",
					"            {",
					"              \"custName\": \"강남역5\",",
					"              \"fixedIndex\": 1,",
					"              \"navSeq\": 0,",
					"              \"noorX\": 4571041,",
					"              \"noorY\": 1352921,",
					"              \"poiId\": 432108,",
					"              \"rpFlag\": 16,",
					"              \"svcDate\": 20190705114015,",
					"              \"totalCnt\": 0",
					"            }",
					"          ],",
					"          \"svcUploadYn\": \"N\",",
					"          \"userKey\": \"{{userKey}}\"",
					"        },",
					"        \"removeBody\": {",
					"          \"minNo\": \"{{minNo}}\",",
					"          \"poiRecentUploads\": [",
					"            {",
					"              \"custName\": \"강남역5\",",
					"              \"noorX\": 4571041,",
					"              \"noorY\": 1352921",
					"            }",
					"          ],",
					"          \"userKey\": \"{{userKey}}\"",
					"        },",
					"        \"modifyBody\": {",
					"          \"minNo\": \"{{minNo}}\",",
					"          \"poiRecentUploads\": [",
					"            {",
					"              \"custName\": \"강남역5\",",
					"              \"fixedIndex\": 1,",
					"              \"noorX\": 4571041,",
					"              \"noorY\": 1352921",
					"            }",
					"          ],",
					"          \"userKey\": \"{{userKey}}\"",
					"        }",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable('personalInfo', () => {",
					"    return {",
					"        \"uri\": \"/api/v1/personal-info\",",
					"        \"registBody\": {",
					"          \"birth\": 19880505,",
					"          \"email\": \"test@sk.com\",",
					"          \"mdn\": \"01000000000\",",
					"          \"userKey\": \"testuser\",",
					"          \"userName\": \"test\"",
					"        }",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable('carInfo', () => {",
					"    return {",
					"        \"uri\": \"/api/v1/car-info\",",
					"        \"registBody\": {",
					"          \"fuel\": \"FT_GAS\",",
					"          \"hipassYn\": \"N\",",
					"          \"insurer\": \"INS_DB\",",
					"          \"insurerRegDate\": 20180505,",
					"          \"model\": \"CT_TRUCK\",",
					"          \"number\": \"00가0000\",",
					"          \"userKey\": \"testuser\"",
					"        }",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable('oilDcJoinInfo', () => {",
					"    return {",
					"        uri: \"/api/v1/oil-dc-join-info\",",
					"        registBody: {",
					"            \"cardType\": \"HNCD\",",
					"            \"registDatetime\": \"20190101123030\",",
					"            \"registType\": \"R\",",
					"            \"userKey\": \"\"",
					"        }",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable('sendToCarInfo', () => {",
					"    return {",
					"        uri: \"/api/v1/send-to-car-info\",",
					"        registBody: {",
					"            \"custName\": \"파인애비뉴\",",
					"            \"navSeq\": \"0\",",
					"            \"noorX\": \"4571653\",",
					"            \"noorY\": \"1352256\",",
					"            \"poiId\": \"2786471\",",
					"            \"rpFlag\": \"0\",",
					"            \"userKey\": \"\"",
					"        },",
					"        removeBody: {",
					"            \"custName\": \"파인애비뉴\",",
					"            \"noorX\": \"4571653\",",
					"            \"noorY\": \"1352256\",",
					"            \"userKey\": \"\"",
					"        }",
					"    }",
					"});",
					"",
					"",
					"postman.setGlobalVariable('utils', () => {",
					"    let getHeader = () => {",
					"      return {",
					"        'chcode': pm.variables.get('chcode'),",
					"        'cp_channel.apcode': pm.variables.get('cp_channel.apcode'),",
					"        'cp_channel.ostype': pm.variables.get('cp_channel.ostype'),",
					"        'tid': pm.variables.get('tid'),",
					"        'content-type': 'application/json'",
					"      };",
					"    };",
					"    ",
					"    let assertEmptyData = function (apiConf, user, messageKey) {",
					"        let url = pm.variables.get('host') + apiConf.uri;",
					"        url += (user.type==\"MDN\"?\"?minNo=\":\"?userKey=\") + user.key;",
					"        ",
					"        pm.sendRequest({",
					"            url: url,",
					"            method: 'GET'",
					"        }, function (err, response, body) {",
					"            let responseBody = response.json();",
					"            pm.test(messageKey + ' 데이터 없음 확인', () => pm.expect(responseBody.code).to.eql('POI04001R'));",
					"        });",
					"    };",
					"    ",
					"    let assertExistData = function (apiConf, user, messageKey) {",
					"        let url = pm.variables.get('host') + apiConf.uri;",
					"        url += (user.type==\"MDN\"?\"?minNo=\":\"?userKey=\") + user.key;",
					"        ",
					"        pm.sendRequest({",
					"            url: url,",
					"            method: 'GET'",
					"        }, function (err, response, body) {",
					"            let responseBody = response.json();",
					"            pm.test(messageKey+' 데이터 존재 확인', () => pm.expect(response).to.have.status(200));",
					"        });",
					"    };",
					"    ",
					"    return {",
					"        getHeader: getHeader,",
					"        assertEmptyData: assertEmptyData,",
					"        assertExistData: assertExistData",
					"    }",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "bd27b00f-4c41-4aa8-9d4a-1c9c82022406",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}